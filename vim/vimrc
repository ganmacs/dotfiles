if 0 | endif

if has('vim_starting')
  if &compatible
    set nocompatible
  endif

  set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

call neobundle#begin(expand('~/.vim/bundle/'))

NeoBundleFetch 'Shougo/neobundle.vim'

" ==================
" plugins
" ==================

NeoBundle 'itchyny/lightline.vim'
NeoBundle 'tomasr/molokai'
NeoBundle 'Shougo/neocomplete'
NeoBundle 'Shougo/neomru.vim'
NeoBundle 'Shougo/unite.vim'
NeoBundle 'scrooloose/syntastic'
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'shougo/unite-outline'
NeoBundle 'jiangmiao/auto-pairs'
NeoBundle 'alpaca-tc/vim-endwise'

call neobundle#end()
filetype plugin indent on
NeoBundleCheck
" ------------------------------------
" neobundle
" ------------------------------------
let g:unite_enable_start_insert=1
let g:unite_source_history_yank_enable =1
let g:unite_split_rule = 'botright'
" The prefix key.
nnoremap <silent> ,uu :<C-u>Unite file_mru buffer<CR>
nnoremap <silent> ,uf :<C-u>Unite file<CR>
nnoremap <silent> ,ui :<C-u>Unite -vertical outline<CR>
" ------------------------------------
" neocomplete
" ------------------------------------
" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.

" ------------------------------------
" colorscheme
" ------------------------------------
syntax on
set background=dark
colorscheme molokai
highlight Normal ctermbg=none

" ------------------------------------
" syntastic
" ------------------------------------
let g:syntastic_mode_map = { 'mode': 'passive',
            \ 'active_filetypes': ['ruby'] }
let g:syntastic_ruby_checkers = ['rubocop']

" ------------------------------------
" lightline
" ------------------------------------
let g:lightline = {
      \ 'colorscheme': 'solarized',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'fugitive', 'readonly', 'filename', 'modified' ] ]
      \ },
      \ 'component_function': {
      \   'fugitive': 'MyFugitive',
      \   'readonly': 'MyReadonly',
      \   'modified': 'MyModified'
      \ }
      \ }

function! MyModified()
  if &filetype == "help"
    return ""
  elseif &modified
    return "+"
  elseif &modifiable
    return ""
  else
    return ""
  endif
endfunction

function! MyReadonly()
  if &filetype == "help"
    return ""
  elseif &readonly
    return "⭤"
  else
    return ""
  endif
endfunction

function! MyFugitive()
  return exists('*fugitive#head') ? fugitive#head() : ''
endfunction

"" Global
set notitle
set directory=~/.vim/tmp
set backupdir=~/.vim/tmp
set clipboard+=unnamedplus,unnamed
set autoread
function! s:remove_dust()
  let cursor = getpos(".")
  " 保存時に行末の空白を除去する
  %s/\s\+$//ge
  " 保存時にtabを2スペースに変換する
  %s/\t/  /ge
  call setpos(".", cursor)
  unlet cursor
endfunction

"Encode
set encoding=UTF-8
set fileencoding=UTF-8
set termencoding=UTF-8

""Search
set incsearch
set hlsearch
set ignorecase
set smartcase
set wrapscan

""Input
set cindent
set shiftwidth=2
set tabstop=2
set expandtab
set softtabstop=2
set whichwrap=b,s,h,l,<,>,[,]

""Display
set number
set title
set showcmd
set ruler
set list
set listchars=tab:>.,trail:_,extends:>,precedes:<
set showmatch
set matchtime=3
set laststatus=2

"" Keybind
nmap <ESC><ESC> ;nohlsearch<CR><ESC>


"" Insert Keybind
inoremap <C-b> <Left>
inoremap <C-f> <Right>
inoremap <C-h> <Backspace>
inoremap <C-d> <Del>

